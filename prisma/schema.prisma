// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      String   @default("user") // 'admin' | 'user'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile     Profile?
  notes       Note[]       @relation("AdminNotes")
  adminPhotos AdminPhoto[] @relation("UploadedBy")

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String
  bio         String?  @db.Text
  hobbies     String[] @db.Text
  socialLinks Json?    // { instagram?: string; x?: string; tiktok?: string; website?: string; ... }
  avatarUrl   String?  // Supabase storage public URL or signed URL
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Note {
  id           String   @id @default(cuid())
  talentUserId String   // whose profile the note is about
  adminUserId  String   // who wrote it
  body         String   @db.Text
  createdAt    DateTime @default(now())

  // Relations
  admin User @relation("AdminNotes", fields: [adminUserId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model InviteToken {
  id          String    @id @default(cuid())
  email       String
  token       String    @unique
  expiresAt   DateTime
  consumedAt  DateTime?
  createdById String    // admin
  createdAt   DateTime  @default(now())

  @@map("invite_tokens")
}

model AdminPhoto {
  id           String   @id @default(cuid())
  filename     String
  path         String   // relative path in storage
  url          String   // public URL to access the file
  folder       String   // folder category (gallery, marketing, etc.)
  originalName String   // original filename before processing
  size         Int      // file size in bytes
  uploadedById String   // admin who uploaded it
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploadedBy User @relation("UploadedBy", fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("admin_photos")
}